h1. Logo comes here

|| Name | Commit Acceptance Plugin ||
|| Version | 0.1-rc1 ||
|| Status | Beta ||
|| Product Versions | ??? ||
|| Author | Ferenc Kiss (ferenc dot kiss (NOSPAM) at midori dot hu) ||
|| Homepage | [http://www.midori.hu/en/opensource.html#conflickr] ||
|| Price | {color:green}free\!{color} ||
|| License | [BSD|http://www.opensource.org/licenses/bsd-license.php] ||
|| JavaDocs | _Under incubation_ ||
|| Source Code Repository | [https://svn.atlassian.com/svn/public/contrib/jira/jira-commitacceptance-plugin] ||
|| FishEye Repository | [http://svn.atlassian.com/fisheye/browse/public/contrib/jira/jira-commitacceptance-plugin] ||
|| Issue Tracking | [http://developer.atlassian.com/jira/browse/CMMT] ||
|| Download Jar | ...coming soon ||

h2. Description/Features

This plug-in lets you define certain basic rules that will determine whether a commit to your version control system will be accepted based on information in JIRA.
For example, you can define a rule that no commit will be accepted unless it contains a valid issue key. Or you can set a rule that no commit would be accepted if the issue was not in an "open" state.

Currently, this plug-in support the [Subversion|http://subversion.tigris.org] and [CVS|http://www.nongnu.org/cvs] version control systems. Both CVS and SVN have the concept of pre-commit hooks, which can be used to run arbitrary code at commit time. The plug-in distribution package contains a set of these hooks that the administrator has to configure for this JIRA instance and install on his source code repository. When a change is to commit, the hook connects to JIRA to evaluate the rules, and then allow or disallow a commit.

Inside JIRA, you can configure the rules behavior on a separate screen. (This configuration is a site-wide setting.)

h2. Installation


h3. Server installation

The server side component is a regular JIRA plug-in, installing it is very simple:
# Copy the plug-in JAR file (_jira-commitacceptance-plugin-xxx.jar_) to the _JIRA_HOME/atlassian-jira/WEB-INF/lib_ directory
# To check whether it has been successfully installed, go to the following URL: [http://localhost:8080/secure/CommitAcceptanceConfigure.jspa]. You should see the plug-in configuration screen here if everything was fine. Alternatively, you can go to the plug-in list in the administration screen screen and check whether you can see this plug-in listed there.

h3. Client installation

We provide two equivalent clients implemented in Perl and Python. You can freely choose between them depending on which runtime environment is available in your system.
You can deploy any of these clients to the two version control systems supported, Subversion and CVS.

h4. Perl client

* Download here: [ActivePerl|http://www.activestate.com/Products/ActivePerl/] is currently the most popular way to get Perl for Windows.
* Read the installation documentation here: [Win32 Perl Wiki|http://win32.perl.org/wiki/index.php?title=Main_Page]
* FAQ: TODO

h4. Python client

* Download here: TODO
* Read the installation documentation here: TODO
* FAQ: TODO

h4. Deploying the client to Subversion

The Subversion client is implemented as a so-called pre-commit hook. To get familiar with the concept of Subversion hooks, please read [http://svnbook.red-bean.com/en/1.1/ch05s02.html].
# Copy _jira-client.pl_ and _pre-commit.bat_ (or _pre-commit.sh_ on UNIX) to the _REPOSITORY_HOME/hooks_ directory

h4. Deploying the client to CVS

The CVS client is implemented as a _verifymsg_ program. To get familiar with the concept of CVS _verifymsg_ programs, please read [http://www.network-theory.co.uk/docs/cvsmanual/cvs_167.html].
# &nbsp;Copy _jira-client.pl_ and _verifymsg_ to the _CVS_HOME/CVSROOT_ directory

h2. Usage

You can configure the rules at [http://localhost:8080/secure/CommitAcceptanceConfigure.jspa].

h2. Version History

|| Ver. || Date || Notes ||
| 0.1-rc1 | ??? | Initial Preview Release |

h2. FAQ

Q. What Subversion client can I use with this?
A. You can use any client (including the commandline client, TortoiseSVN, Subclipse, whatever).

Q. What CVS client can I use with this?
A. You can use any client.

Q. I get "javax.servlet.ServletException: Remote API not activated for this JIRA installation." when trying to commit a change.
A. You have to enable remote API calls at the 'Administration' section. Go to 'General Configuration' and turn it on using 'Edit Configuration'.