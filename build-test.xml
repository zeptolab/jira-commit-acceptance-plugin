<?xml version="1.0" encoding="UTF-8"?>

<!--
	1. SvnAnt must be installed to ANT_HOME/lib from http://subclipse.tigris.org/svnant.html
	2. Ant-Contrib must be installed to ANT_HOME/lib from http://ant-contrib.sourceforge.ne
	3. "svn" must be in PATH
	4. Configure hook scripts
	5. Configure commit acceptance rules
	6. Create the 4 preconfigured issues
	7. Run "commitAll" and check the result log
-->
<project basedir="." default="commit" >
	<taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

	<!-- configuration -->
	<property name="svnrepo.url" value="file:///new/testrepos/jira-svn-repo" />
	<property name="workingcopy.dir" location="/temp/workingcopy" />
	<property name="testfle.path" location="${workingcopy.dir}/LICENSE.txt" />
	<property name="logfile.path" location="${workingcopy.dir}/log.txt" />
	<property name="commitMessage" value="John Doe!" />

	<property name="issue.nonExisting" value="TST-0"></property>
	<property name="issue.unresolvedUnassigned" value="TST-1"></property><!-- can be assigned to a different user -->
	<property name="issue.unresolvedAssigned" value="TST-4"></property>
	<property name="issue.resolvedUnassigned" value="TST-3"></property><!-- can be assigned to a different user -->
	<property name="issue.resolvedAssigned" value="TST-5"></property>

	<target name="init">
		<if>
			<available file="${testfle.path}" />
			<then>
				<echo>Working copy exists.</echo>
			</then>
			<else>
				<mkdir dir="${workingcopy.dir}" />
				<svn>
					<checkout url="${svnrepo.url}" destPath="${workingcopy.dir}" />
				</svn>
			</else>
		</if>
	</target>

	<target name="commit" depends="init" description="TODO">
		<buildnumber file="${testfle.path}"/>
		<svn>
			<status path="${testfle.path}" revisionProperty="oldRevision" />
		</svn>
		<!-- commandline SVN executable is used to commit as SvnAnt can treat with commit hooks?! -->
		<exec executable="svn">
			<arg value="commit" />
			<arg value="-m" />
			<arg value="${commitMessage}" />
			<arg value="${testfle.path}" />
		</exec>
		<svn>
			<status path="${testfle.path}" revisionProperty="newRevision" />
		</svn>
		<if>
			<equals arg1="${newRevision}" arg2="${oldRevision}" />
			<then>
				<echo file="${logfile.path}" append="true">${oldRevision} -> ${newRevision} REJECTED: '${commitMessage}'
</echo>
			</then>
			<else>
				<echo file="${logfile.path}" append="true">${oldRevision} -> ${newRevision} Accepted: '${commitMessage}'
</echo>
			</else>
		</if>
	</target>

	<target name="commitAll" depends="init" description="TODO">
		<delete file="${logfile.path}"></delete>

		<antcall target="commit"><param name="commitMessage" value="No issues" /></antcall>
		<antcall target="commit"><param name="commitMessage" value="1 nonExisting:                                 [${issue.nonExisting}]" /></antcall>
		<antcall target="commit"><param name="commitMessage" value="1 nonExisting + 1 unresolvedUnassigned:        [${issue.nonExisting}] [${issue.unresolvedUnassigned}]" /></antcall>
		<antcall target="commit"><param name="commitMessage" value="1 unresolvedUnassigned:                        [${issue.unresolvedUnassigned}]" /></antcall>
		<antcall target="commit"><param name="commitMessage" value="2 unassigned:                                  [${issue.unresolvedUnassigned}] [${issue.resolvedUnassigned}]" /></antcall>

		<antcall target="commit"><param name="commitMessage" value="1 unresolvedUnassigned:                        [${issue.unresolvedUnassigned}]" /></antcall>
		<antcall target="commit"><param name="commitMessage" value="1 unresolvedUnassigned + 1 resolvedUnassigned: [${issue.unresolvedUnassigned}] [${issue.resolvedUnassigned}]" /></antcall>
		<antcall target="commit"><param name="commitMessage" value="1 resolvedUnassigned:                          [${issue.resolvedUnassigned}]" /></antcall>
		<antcall target="commit"><param name="commitMessage" value="2 resolved:                                    [${issue.resolvedUnassigned}] [${issue.resolvedAssigned}]" /></antcall>

		<antcall target="commit"><param name="commitMessage" value="1 unresolvedUnassigned:                        [${issue.unresolvedUnassigned}]" /></antcall>
		<antcall target="commit"><param name="commitMessage" value="1 unresolvedUnassigned + 1 unresolvedAssigned: [${issue.unresolvedUnassigned}] [${issue.unresolvedAssigned}]" /></antcall>
		<antcall target="commit"><param name="commitMessage" value="1 unresolvedAssigned:                          [${issue.unresolvedAssigned}]" /></antcall>
		<antcall target="commit"><param name="commitMessage" value="2 assigned:                                    [${issue.unresolvedAssigned}] [${issue.resolvedAssigned}]" /></antcall>

		<loadfile property="log" srcfile="${logfile.path}" />
		<echo>--------------------------------------------------------------------------------</echo>
		<echo>Result log</echo>
		<echo>--------------------------------------------------------------------------------</echo>
		<echo>${log}</echo>
	</target>
</project>
